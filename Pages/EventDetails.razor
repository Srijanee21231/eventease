@page "/events/{id:guid}"
@using EventEase.Shared
@inject EventEase.Services.EventService EventService
@inject NavigationManager NavigationManager

<h3>Event Details</h3>

@if (eventItem == null)
{
    <p>Loading or event not found.</p>
}
else
{
    <div class="card p-3">
        <h4>@eventItem.Name</h4>
        <div><strong>Date:</strong> @eventItem.Date.ToString("yyyy-MM-dd")</div>
        <div><strong>Location:</strong> @eventItem.Location</div>
    </div>

    <div class="mt-3">
        <button class="btn btn-primary me-2" @onclick="@(() => GoToRegister(eventItem.Id))">Register</button>
        <button class="btn btn-secondary" @onclick="ToggleEdit">@((isEditing ? "Stop editing" : "Edit"))</button>
    </div>

    @if (isEditing)
    {
        <div class="mt-3 card p-3">
            <h5>Edit event</h5>

            <EditForm Model="editModel" OnValidSubmit="SaveChanges">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-2">
                    <label class="form-label">Name</label>
                    <InputText class="form-control" @bind-Value="editModel.Name" />
                    <ValidationMessage For="@(() => editModel.Name)" />
                </div>

                <div class="mb-2">
                    <label class="form-label">Date</label>
                    <InputDate class="form-control" @bind-Value="editModel.Date" />
                    <ValidationMessage For="@(() => editModel.Date)" />
                </div>

                <div class="mb-2">
                    <label class="form-label">Location</label>
                    <InputText class="form-control" @bind-Value="editModel.Location" />
                    <ValidationMessage For="@(() => editModel.Location)" />
                </div>

                <button type="submit" class="btn btn-primary me-2">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>

                @if (!string.IsNullOrEmpty(saveResult))
                {
                    <div class="mt-2">
                        <span class="text-success">@saveResult</span>
                    </div>
                }
            </EditForm>
        </div>
    }
}

@code {
    [Parameter] public Guid id { get; set; }

    private EventModel? eventItem;
    private EventModel editModel = new EventModel();
    private bool isEditing = false;
    private string? saveResult;

    protected override async Task OnInitializedAsync()
    {
        eventItem = await EventService.GetEventByIdAsync(id);
        if (eventItem != null)
        {
            editModel = new EventModel
            {
                Id = eventItem.Id,
                Name = eventItem.Name,
                Date = eventItem.Date,
                Location = eventItem.Location
            };
        }
    }

    private void ToggleEdit()
    {
        if (eventItem == null) return;
        isEditing = !isEditing;
        if (isEditing)
        {
            editModel = new EventModel
            {
                Id = eventItem.Id,
                Name = eventItem.Name,
                Date = eventItem.Date,
                Location = eventItem.Location
            };
            saveResult = null;
        }
    }

    private async Task SaveChanges()
    {
        if (eventItem == null) return;

        eventItem.Name = editModel.Name;
        eventItem.Date = editModel.Date;
        eventItem.Location = editModel.Location;

        var ok = await EventService.UpdateEventAsync(eventItem);
        if (ok)
        {
            saveResult = "Saved successfully.";
            isEditing = false;
            StateHasChanged();
        }
        else
        {
            saveResult = "Failed to save changes.";
        }
    }

    private void CancelEdit() => isEditing = false;

    private void GoToRegister(Guid id) => NavigationManager.NavigateTo("/register/" + id);
}
